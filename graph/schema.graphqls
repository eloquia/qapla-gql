# GraphQL schema example
#
# https://gqlgen.com/getting-started/
#
# Data shapes requested by the front-end

# # # # # # # # # # # # # # # # #
#               User
# # # # # # # # # # # # # # # # #

type User {
  id: Int!
  firstName: String!
  lastName: String!
}

type UserDetailsShort {
  id: Int!
  firstName: String!
  lastName: String!
  email: String!
  assignedProjects: [Project]
}

type UserDetails {
  id: Int!
  firstName: String!
  lastName: String!
  email: String!
  goesBy: String
  middleName: String
  gender: String
  ethnicity: String
  position: String
  institution: String
  assignedProjects: [Project]
}

input UserDetailsInput {
  userId: Int!
  goesBy: String
  middleName: String
  gender: String
  ethnicity: String
  position: String
  institution: String
}

input NewUser {
  firstName: String!
  lastName: String!
  email: String!
}

input NewUserAuth {
  email: String!
  password: String!
}

input UpdateUser {
  id: Int!
  firstName: String!
  lastName: String!
  goesBy: String!
  middleName: String!
  email: String!
  gender: String!
  ethnicity: String!
  position: String!
  institution: String!
  isActive: Boolean!
}

input NewPersonnel {
  firstName: String!
  lastName: String!
  goesBy: String
  middleName: String
  email: String!
  gender: String
  ethnicity: String
  position: String
  institution: String
}

# # # # # # # # # # # # # # # # #
#             Project
# # # # # # # # # # # # # # # # #

type Project {
  id: Int!
  name: String!
  description: String
  personnel: [User!]!
  slug: String!
  createdAt: Time
  updatedAt: Time
}

type ProjectDetails {
  id: Int!
  name: String!
  description: String!
  personnel: [User]
  slug: String!
}

type ProjectListItem {
  id: Int!
  name: String!
  slug: String!
  personnel: [User]
}

input NewProject {
  name: String!
  description: String
}

input UpdateProject {
  id: Int!
  name: String!
  description: String
}

# # # # # # # # # # # # # # # # #
#             Meeting
# # # # # # # # # # # # # # # # #

type Meeting {
  id: Int!
  name: String!
  people: [User]
  projects: [Project]
  startTime: Time!
  durationMinutes: Int!
}

type MeetingListItem {
  id: Int!
  name: String!
  startTime: Time!
}

input NewUserMeeting {
  name: String!
  peopleIDs: [Int]
  startTime: Time!
  durationMinutes: Int!
}

input NewProjectMeeting {
  name: String!
  projectIDs: [Int]
  startTime: Time!
  durationMinutes: Int!
}

input MeetingNoteTagInput {
  id: Int!
  text: String!
}

type MeetingNoteTag {
  id: Int!
  text: String!
}

input MeetingNoteInput {
  id: Int
  about: String!
  author: String!
  text: String!
  tags: [MeetingNoteTagInput]
}

type MeetingNote {
  id: Int!
  aboutId: Int!
  authorId: Int!
  text: String!
  tags: [MeetingNoteTag]
  createdAt: Time!
  updatedAt: Time!
}

input MeetingItemInput {
  id: Int!
  personnel: String!
  plannedAttendanceStatus: String!
  actualAttendanceStatus: String!
  attendanceReason: String
  notes: [MeetingNoteInput]
}

type MeetingItem {
  id: Int!
  meetingID: Int!
  personnelID: Int!
  plannedAttendanceStatus: String!
  actualAttendanceStatus: String!
  attendanceReason: String
  notes: [MeetingNote]
}

type MeetingDetails {
  id: Int!
  name: String!
  people: [User]
  projects: [Project]
  meetingItems: [MeetingItem]
  startTime: Time!
  durationMinutes: Int!
}

input UpdatedPeopleMeetingDetails {
  id: Int!
  name: String!
  people: [Int]
  meetingItems: [MeetingItemInput!]!
  startTime: Time!
  durationMinutes: Int!
}

type PeopleMeetingDetails {
  id: Int!
  name: String!
  people: [User]
  meetingItems: [MeetingItem]
  startTime: Time!
  durationMinutes: Int!
}

input UpdateMeetingItemRequest {
  id: Int!
  personnelID: Int!
  plannedAttendanceStatus: String!
  actualAttendanceStatus: String!
  attendanceReason: String!
  notes: [MeetingNoteInput!]!
}

# # # # # # # # # # # # # # # # #
#             Queries
# # # # # # # # # # # # # # # # #

type Mutation {
  # # #
  # # # User
  # # #
  createUser(input: NewUser!): UserDetailsShort!
  createAuth(input: NewUserAuth!): UserDetailsShort!
  createPersonnel(input: NewPersonnel!): UserDetailsShort!
  addUserDetails(input: UserDetailsInput!): UserDetails!
  updateUser(input: UpdateUser!): User!

  # # #
  # # # Project
  # # #
  createProject(input: NewProject!): Project!
  updateProject(input: UpdateProject!): Project!
  assignUserToProject(userId: Int!, projectId: Int!): User!

  # # #
  # # # Authentication
  # # #
  signIn(email: String!, password: String!): User!

  # # #
  # # # Meeting
  # # #
  createUserMeeting(input: NewUserMeeting!): MeetingDetails!
  createProjectMeeting(input: NewProjectMeeting!): MeetingDetails!
  updateUserMeeting(input: UpdatedPeopleMeetingDetails!): PeopleMeetingDetails!
  updateMeetingItem(input: UpdateMeetingItemRequest!): MeetingItem!
}

type Query {
  # # #
  # # # User
  # # #
  users: [UserDetailsShort]!
  getUserById(id: Int!): UserDetails!
  isEmailInUse(email: String!): Boolean!

  # # #
  # # # Project
  # # #
  projectListItems: [ProjectListItem]!
  getProjectById(id: Int!): Project!
  projectDetails(slug: String!): ProjectDetails!

  # # #
  # # # Meeting
  # # #
  meetingById(id: Int!): MeetingDetails!
  meetingsByDate(date: Time!): [MeetingDetails]!

  # # #
  # # # Meeting Note Tags
  # # #
  tags: [MeetingNoteTag]!
}

scalar Time
